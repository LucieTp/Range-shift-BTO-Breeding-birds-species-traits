# distance
df_rangeshift$shift_max20_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.max20_P.3)), c(3, mean(lat.max20_P.1)))/1000*ifelse(df_rangeshift$shift_max20_P.1.3[i]<0, -1, 1)
df_rangeshift$shift_min20_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.min20_P.3)), c(3, mean(lat.min20_P.1)))/1000*ifelse(df_rangeshift$shift_min20_P.1.3[i]<0, -1, 1)
df_rangeshift$shift_all_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.all_P.3)), c(3, mean(lat.all_P.1)))/1000*ifelse(df_rangeshift$shift_all_P.1.3[i]<0, -1, 1)
# df_rangeshift$climate_velocity.max20.P.3[i] = mean(Loc10$Velocity[which(Loc10$lat %in% lat.max20_P.3)], na.rm = T)
# df_rangeshift$climate_velocity.min20.P.3[i] = mean(Loc10$Velocity[which(Loc10$lat %in% lat.min20_P.3)], na.rm = T)
df_rangeshift$nrecord_P.1[(i-1)*20+n] <- Spec$P.1[which(Spec$speccode == spec_speccode[i])]  # length(lat.all_P.1)
df_rangeshift$nrecord_P.3[(i-1)*20+n] <- Spec$P.3[which(Spec$speccode == spec_speccode[i])]  # length(lat.all_P.3)
df_rangeshift$nsamp[(i-1)*20+n] = n
}
}
df_rangeshift <- data.frame(speccode=rep(spec_speccode,each = 20))
for(i in 1:nSpec){
for(n in 1:20){
print(i+n)
lat.all_P.1 <- sort(data.frame(BTO_distrib %>% filter(speccode == spec_speccode[i], periodN=="P.1") %>% dplyr::select(lat))$lat)
lat.all_P.3 <- sort(data.frame(BTO_distrib %>% filter(speccode == spec_speccode[i], periodN=="P.3") %>% dplyr::select(lat))$lat)
lat.all_P.1 = sample(lat.all_P.1, 50)
lat.all_P.3 = sample(lat.all_P.3, 50)
lat.max20_P.1 <- tail(sort(lat.all_P.1), 25)
lat.max20_P.3 <- tail(sort(lat.all_P.3), 25)
lat.min20_P.1 <- head(sort(lat.all_P.1), 25)
lat.min20_P.3 <- head(sort(lat.all_P.3), 25)
# distance from northern boundary at P.1 (distance the species has to expand towards the north)
df_rangeshift$dist_N_km_max20_P.1[(i-1)*20+n] <- distGeo(c(3,max(BTO_distrib$lat)), c(3, mean(lat.max20_P.1)))/1000*ifelse(max(BTO_distrib$lat)<mean(lat.max20_P.1), -1, 1)
# distance from southern boundary at P.1 (distance the species has to expand towards the south)
df_rangeshift$dist_S_km_min20_P.1[(i-1)*20+n] <- distGeo(c(3,min(BTO_distrib$lat)), c(3, mean(lat.min20_P.1)))/1000*ifelse(min(BTO_distrib$lat)>mean(lat.min20_P.1), -1, 1)
# difference in latitude
df_rangeshift$shift_max20_P.1.3[(i-1)*20+n] <- mean(lat.max20_P.3) - mean(lat.max20_P.1)
df_rangeshift$shift_min20_P.1.3[(i-1)*20+n] <- mean(lat.min20_P.3) - mean(lat.min20_P.1)
df_rangeshift$shift_all_P.1.3[(i-1)*20+n] <- mean(lat.all_P.3) - mean(lat.all_P.1)
# distance
df_rangeshift$shift_max20_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.max20_P.3)), c(3, mean(lat.max20_P.1)))/1000*ifelse(df_rangeshift$shift_max20_P.1.3[i]<0, -1, 1)
df_rangeshift$shift_min20_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.min20_P.3)), c(3, mean(lat.min20_P.1)))/1000*ifelse(df_rangeshift$shift_min20_P.1.3[i]<0, -1, 1)
df_rangeshift$shift_all_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.all_P.3)), c(3, mean(lat.all_P.1)))/1000*ifelse(df_rangeshift$shift_all_P.1.3[i]<0, -1, 1)
# df_rangeshift$climate_velocity.max20.P.3[i] = mean(Loc10$Velocity[which(Loc10$lat %in% lat.max20_P.3)], na.rm = T)
# df_rangeshift$climate_velocity.min20.P.3[i] = mean(Loc10$Velocity[which(Loc10$lat %in% lat.min20_P.3)], na.rm = T)
df_rangeshift$nrecord_P.1[(i-1)*20+n] <- Spec$P.1[which(Spec$speccode == spec_speccode[i])]  # length(lat.all_P.1)
df_rangeshift$nrecord_P.3[(i-1)*20+n] <- Spec$P.3[which(Spec$speccode == spec_speccode[i])]  # length(lat.all_P.3)
df_rangeshift$nsamp[(i-1)*20+n] = n
}
}
df_rangeshift <- data.frame(speccode=rep(spec_speccode,each = 20))
for(i in 1:nSpec){
for(n in 1:20){
lat.all_P.1 <- sort(data.frame(BTO_distrib %>% filter(speccode == spec_speccode[i], periodN=="P.1") %>% dplyr::select(lat))$lat)
lat.all_P.3 <- sort(data.frame(BTO_distrib %>% filter(speccode == spec_speccode[i], periodN=="P.3") %>% dplyr::select(lat))$lat)
lat.all_P.1 = sample(lat.all_P.1, 50)
lat.all_P.3 = sample(lat.all_P.3, 50)
lat.max20_P.1 <- tail(sort(lat.all_P.1), 25)
lat.max20_P.3 <- tail(sort(lat.all_P.3), 25)
lat.min20_P.1 <- head(sort(lat.all_P.1), 25)
lat.min20_P.3 <- head(sort(lat.all_P.3), 25)
# distance from northern boundary at P.1 (distance the species has to expand towards the north)
df_rangeshift$dist_N_km_max20_P.1[(i-1)*20+n] <- distGeo(c(3,max(BTO_distrib$lat)), c(3, mean(lat.max20_P.1)))/1000*ifelse(max(BTO_distrib$lat)<mean(lat.max20_P.1), -1, 1)
# distance from southern boundary at P.1 (distance the species has to expand towards the south)
df_rangeshift$dist_S_km_min20_P.1[(i-1)*20+n] <- distGeo(c(3,min(BTO_distrib$lat)), c(3, mean(lat.min20_P.1)))/1000*ifelse(min(BTO_distrib$lat)>mean(lat.min20_P.1), -1, 1)
# difference in latitude
df_rangeshift$shift_max20_P.1.3[(i-1)*20+n] <- mean(lat.max20_P.3) - mean(lat.max20_P.1)
df_rangeshift$shift_min20_P.1.3[(i-1)*20+n] <- mean(lat.min20_P.3) - mean(lat.min20_P.1)
df_rangeshift$shift_all_P.1.3[(i-1)*20+n] <- mean(lat.all_P.3) - mean(lat.all_P.1)
# distance
df_rangeshift$shift_max20_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.max20_P.3)), c(3, mean(lat.max20_P.1)))/1000*ifelse(df_rangeshift$shift_max20_P.1.3[i]<0, -1, 1)
df_rangeshift$shift_min20_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.min20_P.3)), c(3, mean(lat.min20_P.1)))/1000*ifelse(df_rangeshift$shift_min20_P.1.3[i]<0, -1, 1)
df_rangeshift$shift_all_P.1.3_dist_km[(i-1)*20+n] <- distGeo(c(3,mean(lat.all_P.3)), c(3, mean(lat.all_P.1)))/1000*ifelse(df_rangeshift$shift_all_P.1.3[i]<0, -1, 1)
# df_rangeshift$climate_velocity.max20.P.3[i] = mean(Loc10$Velocity[which(Loc10$lat %in% lat.max20_P.3)], na.rm = T)
# df_rangeshift$climate_velocity.min20.P.3[i] = mean(Loc10$Velocity[which(Loc10$lat %in% lat.min20_P.3)], na.rm = T)
df_rangeshift$nrecord_P.1[(i-1)*20+n] <- Spec$P.1[which(Spec$speccode == spec_speccode[i])]  # length(lat.all_P.1)
df_rangeshift$nrecord_P.3[(i-1)*20+n] <- Spec$P.3[which(Spec$speccode == spec_speccode[i])]  # length(lat.all_P.3)
df_rangeshift$nsamp[(i-1)*20+n] = n
}
}
hist(df_rangeshift$dist_N_km_max20_P.1[which(speccode == 1)])
hist(df_rangeshift$dist_N_km_max20_P.1[which(df_rangeshift$speccode == 1)])
hist(df_rangeshift$dist_N_km_max20_P.1[which(df_rangeshift$speccode == 2)])
hist(df_rangeshift$dist_N_km_max20_P.1[which(df_rangeshift$speccode == 71)])
hist(df_rangeshift$shift_max20_P.1.3_dist_km[which(df_rangeshift$speccode == 71)])
hist(df_rangeshift$shift_max20_P.1.3_dist_km[which(df_rangeshift$speccode == 1)])
hist(df_rangeshift$shift_max20_P.1.3_dist_km[which(df_rangeshift$speccode == 2)])
hist(df_rangeshift$shift_max20_P.1.3_dist_km[which(df_rangeshift$speccode == 4)])
hist(df_rangeshift$shift_max20_P.1.3_dist_km[which(df_rangeshift$speccode == 12)])
# NOT RUN {
## positive data example
set.seed(8192)
x <- 2^rnorm(100)
fhat <- kde(x=x, positive=TRUE)
library(sf)
BTO_sf = st_as_sf(BTO_distrib, coords = c('long','lat'))
plot(BTO_sf)
BTO_sf = st_as_sf(BTO_distrib[,1], coords = c('long','lat'))
View(BTO_distrib)
conv_nor <- st_simplify(st_buffer(st_convex_hull(st_union(st_geometry(filter(BTO_sf, speccode == 1)))), dist = 15000), dTolerance = 5000)
plot(conv_nor)
plot(conv_nor)
par(mfrow = c(1,1))
?st_convex_hull
conv_nor <- st_buffer(subset(BTO_sf, speccode == 1))
conv_nor <- st_buffer(subset(BTO_sf, speccode == 1), dist = 0)
plot(conv_nor)
View(conv_nor)
?st_buffer
conv_nor <- st_buffer(subset(BTO_sf, speccode == 1), dist = 1)
View(conv_nor)
subset(BTO_sf, speccode == 1)
conv_nor <- st_concave_hull(subset(BTO_sf, speccode == 1), dist = 1)
conv_nor <- st_concave_hull(subset(BTO_sf, speccode == 1))
conv_nor <- st_convexe_hull(subset(BTO_sf, speccode == 1))
conv_nor <- st_convex_hull(subset(BTO_sf, speccode == 1))
plot(conv_nor[,1])
plot(conv_nor)
View(conv_nor)
conv_nor <- st_convex_hull(st_union(subset(BTO_sf, speccode == 1)))
plot(conv_nor)
plot(subset(BTO_sf, speccode == 1)[,1], add = T)
Spec
area(conv_nor)
area(conv_nor[[1]])
conv_nor <-  st_convex_hull(st_union(subset(BTO_sf, speccode == 1)), crs = crs(sf_UK))
st_crs(conv_nor)
st_crs(conv_nor) = crs(sf_UK)
area(conv_nor)
?area
st_area(conv_nor)
library(sf)
par(mfrow = c(4,4))
BTO_sf = st_as_sf(BTO_distrib, coords = c('long','lat'))
for (sp in BTO_distrib$speccode){
conv_nor <-  st_convex_hull(st_union(subset(BTO_sf, speccode == sp)))
plot(conv_nor)
plot(subset(BTO_sf, speccode == sp)[,1], add = T)
BTO_distrib$area_m2 = st_area(conv_nor)
}
library(sf)
par(mfrow = c(4,4))
BTO_sf = st_as_sf(BTO_distrib, coords = c('long','lat'))
for (sp in unique(BTO_distrib$speccode)){
conv_nor <-  st_convex_hull(st_union(subset(BTO_sf, speccode == sp)))
plot(conv_nor)
plot(subset(BTO_sf, speccode == sp)[,1], add = T)
BTO_distrib$area_m2[which(BTO_distrib$speccode == sp)] = st_area(conv_nor)
}
st_concave_hull(st_union(subset(BTO_sf, speccode == sp)))
BTO_distrib$area_m2
st_area(conv_nor)
View(BTO_distrib)
library(sf)
par(mfrow = c(4,4))
BTO_sf = st_as_sf(BTO_distrib, coords = c('long','lat'))
for (sp in unique(BTO_distrib$speccode)){
conv <-  st_convex_hull(st_union(subset(BTO_sf, speccode == sp)))
plot(conv, main = sp)
plot(subset(BTO_sf, speccode == sp)[,1], add = T)
st_crs(conv) = crs(sf_UK)
BTO_distrib$area_m2[which(BTO_distrib$speccode == sp)] = st_area(conv)
}
View(BTO_distrib)
library(sf)
par(mfrow = c(6,6))
BTO_sf = st_as_sf(BTO_distrib, coords = c('long','lat'))
for (sp in unique(BTO_distrib$speccode)){
conv <-  st_convex_hull(st_union(subset(BTO_sf, speccode == sp)))
plot(conv, main = sp)
plot(subset(BTO_sf, speccode == sp)[,1], add = T)
st_crs(conv) = crs(sf_UK)
BTO_distrib$area_m2[which(BTO_distrib$speccode == sp)] = st_area(conv)
}
BTO_distrib$area_m2/1000^2
BTO_distrib$density = BTO_distrib$P.1/(BTO_distrib$area_m2/1000^2)
BTO_distrib$density
BTO_distrib$density.P.1 = BTO_distrib$P.1/(BTO_distrib$area_m2/1000^2)
BTO_distrib$density.P.3 = BTO_distrib$P.3/(BTO_distrib$area_m2/1000^2)
View(BTO_distrib)
hist(BTO_distrib$density.P.1)
hist(BTO_distrib$density.P.3)
summary(BTO_distrib$density.P.1)
summary(BTO_distrib$density.P.3)
plot(BTO_distrib$P.1~BTO_distrib$density.P.1)
tb = read.csv2("results/pglmm_scaled_terrestrialNS_PCs_Std.Error.R2.NoOrkneyNoShetlands.Outliers.NotLogged.rlm.csv", sep =",", dec = ".")
names(tb)
View(tb)
tb1 = pivot_wider(tb[which(tb$value %in% c("t.value_mean.rlm","estimate_mean.rlm")),-1], values_from = names(tb)[8:22], names_from = value)
tb1 = tb1[-which(str_detect(tb1$model, "Non passeriformes")),]
tb1$shift = ifelse(tb1$shift == "max", "leading edge shift",ifelse(tb1$shift == "min","rear edge shift", "Expansion/Retraction"))
tb1 = tb1[,-which(str_detect(colnames(tb1),"Loglik|phylo.mean"))]
tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))] = apply(tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))], 2, as.numeric)
tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))] = round(tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))],2)
test = tb1
test[,c(7:36)]
tb1 = pivot_wider(tb[which(tb$value %in% c("t.value_mean.rlm","estimate_mean.rlm")),-1], values_from = names(tb)[8:22], names_from = value)
which(str_detect(tb1$model, "Non passeriformes"))
# tb1 = tb1[-which(str_detect(tb1$model, "Non passeriformes")),]
tb1$shift = ifelse(tb1$shift == "max", "leading edge shift",ifelse(tb1$shift == "min","rear edge shift", "Expansion/Retraction"))
tb1 = tb1[,-which(str_detect(colnames(tb1),"Loglik|phylo.mean"))]
tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))] = apply(tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))], 2, as.numeric)
tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))] = round(tb1[,c("r2.phylo","p.value.phylo", "R2.rr2", str_subset(names(tb1), 'estimate'))],2)
test = tb1
test[,c(7:36)]
test[,c(7:36)] = apply(test[,c(7:36)], 2, as.character)
test[is.na(test)] = ''
View(test)
for(i in seq(7,36,2)) {test[,i] = apply(test[,c(i, i+1)], 1, function(x) paste(x[1], x[2]))}
test = test[,-str_which(names(test), 't.value')]
safe_colorblind_palette <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499",
"#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")
scales::show_col(safe_colorblind_palette)
loc = merge(Loc10, BTO_distrib[which(BTO_distrib$speccode == 95 & BTO_distrib$periodN == "P.1"),])
loc$Edge = ifelse(loc$lat %in% tail(sort(loc$lat), 20), "Leading", ifelse(loc$lat %in% head(sort(loc$lat), 20), "Rear", "Middle"))
Northern.dist = ggplot(data = sf_UK) + geom_sf(colour = "lightgrey") + geom_point(data = loc, aes(x = long, y = lat), size = 1, shape = 15) +
stat_ellipse(data = loc[which(loc$Edge %in% c("Leading","Rear")),], aes(x = long, y = lat, colour = Edge), size = 1.2) +
geom_hline(yintercept = max(BTO_distrib$lat), linetype="dashed") + geom_hline(yintercept = min(BTO_distrib$lat), linetype="dashed") +
ggtitle("Northern species") + ylab("") + xlab("") + theme_classic(base_size =  18)
library(tidyverse)
tb[,8:22] = apply(tb[,8:22], 2, as.numeric)
View(tb)
tb2 = pivot_longer(tb, cols = 8:22, names_to = "covariate", values_to = "estimate")
View(tb2)
tb2 = subset(tb2, value %in% c('estimate_mean.rlm','t.value_mean.rlm'))
tb2 = pivot_wider(tb2[,2:13], values_from = estimate, names_from = value)
# tb2 = tb2[-which(str_detect(tb2$model, "Non passeriformes")),]
tb2$shift = ifelse(tb2$shift == "max", "leading edge shift",ifelse(tb2$shift == "min","rear edge shift", "Expansion"))
tb2$significance = ifelse(tb2$t.value_mean.rlm>=2,"***","")
tb2$size = ifelse(tb2$t.value_mean.rlm>=2,0.6,0.5)
tb2$covariate = factor(tb2$covariate)
levels(tb2$covariate) = list("Migrant status - Migrant" = "migratory_binomialMigrant","Diet diversity" = "scale.diet_diversity.",
"Northern boundary effect" = "scale.dist_N_km_max20_P.1.", "Southern boundary effect" = "scale.dist_S_km_min20_P.1.",
"Habitat generality" = "scale.habitat_gen.",
"Log10 body mass" = "scale.log.BodyMass.Value.", "Normalised number of prey" = "scale.normalised_indegree.",
"Number of predators" = "scale.outdegree.", "Range size" = "scale.P.1.", "Precipitation seasonality" = "scale.pc1_env.",
"Association with forest/grasslands" = "scale.pc1_lc.","Temperature seasonality" = "scale.pc2_env.",
"Association with urban areas/croplands" = "scale.pc2_lc.","Trophic position" = "scale.trophic_position.",
"Intercept" = "X.Intercept.")
tb2$shift = as.factor(tb2$shift)
tb2$shift = relevel(tb2$shift, "rear edge shift")
levels(tb2$shift)
### SPECIES TRAITS - no expansion
# labels = c('','','Forest/grassland','','Urban area/cropland','','Body mass','','Diet diversity','','Habitat generality','','Migratory status - Migrant','','Normalised indegree','','Precipitation seasonality','','Temperature seasonality','','Trophic position','','Vulnerability','')
labels = c('','Association with forest/grassland','','Association with urban area/cropland','','Diet diversity','','Habitat generality','','Log 10 body mass','','Migratory status - Migrant','','Normalised number of prey','','Number of predators','','Association with precipitation','','Association with temperature','','Trophic position','')
library(ggrepel)
traits_nodiff$shift = relevel(traits_nodiff$shift, "rear edge shift")
traits_nodiff$linesize = ifelse(traits_nodiff$significance %in% c('','.'), 1, 1.5)
biogeo = tb2[which(tb2$covariate %in% c("Northern boundary effect", "Southern boundary effect", "Range size", "Intercept")),]
traits = tb2[which(!tb2$covariate %in% c("Northern boundary effect", "Southern boundary effect", "Range size",'Intercept')),]
traits_nodiff = traits[which(traits$shift!='Expansion'),]
traits_nodiff$shift = relevel(traits_nodiff$shift, "rear edge shift")
traits_nodiff$linesize = ifelse(traits_nodiff$significance %in% c('','.'), 1, 1.5)
g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) + scale_y_discrete(labels = labels) + ggtitle('Northern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) + scale_y_discrete(labels = labels) +
ggtitle('Northern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g1
g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) + scale_y_discrete(labels = labels) +
ggtitle('Northern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g1
g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) + scale_y_discrete(labels = labels) +
ggtitle('Northern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g2 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "southern"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Southern species')+ # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels = labels)+ ggtitle('Southern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g3 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "Passeriformes"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Passeriformes') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) +
xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) + scale_y_discrete(labels =labels)+ ggtitle('Passeriformes')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels = labels) + ggtitle('Northern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g2 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "southern"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Southern species')+ # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels = labels)+ ggtitle('Southern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g3 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "Passeriformes"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Passeriformes') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels =labels)+ ggtitle('Passeriformes')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g4 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "terrestrial"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('All species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels =labels)+ ggtitle('All species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
ggarrange(g1,Northern.dist,g3, g2,Southern.dist,g4, common.legend = T, labels = c('a','','c','b','','d'), widths = c(1.5,1,1.5), font.label = list(size = 20))
library(ggpubr)
ggarrange(g1,Northern.dist,g3, g2,Southern.dist,g4, common.legend = T, labels = c('a','','c','b','','d'), widths = c(1.5,1,1.5), font.label = list(size = 20))
loc = merge(Loc10, BTO_distrib[which(BTO_distrib$speccode == 272 & BTO_distrib$periodN == "P.1"),])
loc$Edge = ifelse(loc$lat %in% tail(sort(loc$lat), 20), "Leading", ifelse(loc$lat %in% head(sort(loc$lat), 20), "Rear", "Middle"))
Southern.dist = ggplot(data = sf_UK) + geom_sf(colour = "lightgrey") + geom_point(data = loc, aes(x = long, y = lat), size = 1, shape = 15) +
stat_ellipse(data = loc[which(loc$Edge %in% c("Leading","Rear")),], aes(x = long, y = lat, colour = Edge), size = 1.2) +
geom_hline(yintercept = max(BTO_distrib$lat), linetype="dashed") + geom_hline(yintercept = min(BTO_distrib$lat), linetype="dashed") +
ggtitle("Southern species") + ylab("") + xlab("") + theme_classic(base_size =  20)
ggarrange(g1,Northern.dist,g3, g2,Southern.dist,g4, common.legend = T, labels = c('a','','c','b','','d'), widths = c(1.5,1,1.5), font.label = list(size = 20))
g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels = labels) + ggtitle('Northern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g2 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "southern"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Southern species')+ # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels = labels)+ ggtitle('Southern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g3 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "Passeriformes"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Passeriformes') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up, size = linesize), height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels =labels)+ ggtitle('Passeriformes')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
g4 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "terrestrial"),], aes(x = estimate_mean.rlm, y = paste(covariate,shift), colour = shift, label = significance)) + geom_point(size = 3) + geom_vline(xintercept = 0) + geom_text(hjust=0.5, vjust=0.2,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('All species') + # geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1, alpha = .8) + xlim(min(traits[,'CI_lo']),max(traits[,'CI_up'])) +
scale_y_discrete(labels =labels)+ ggtitle('All species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 20) + theme(axis.ticks = element_blank())  + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash')+ guides(size = 'none')
# g1 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "northern"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash') + geom_vline(xintercept = 0) + geom_point(size = 2) + geom_text(hjust=0.5, vjust=0.35,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Northern species') + geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1) + xlim(min(traits_nodiff[,'CI_lo']),max(traits_nodiff[,'CI_up'])) + scale_y_discrete(labels = rev(labels), expand = c(0, 1), limits=rev) + ggtitle('Northern species') + scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 18) + theme(axis.ticks = element_blank())
# g2 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "southern"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash') + geom_vline(xintercept = 0) + geom_point(size = 2) + geom_text(hjust=0.5, vjust=0.35,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Southern species')+ geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up),  size = 1, height = .1) + xlim(min(traits_nodiff[,'CI_lo']),max(traits_nodiff[,'CI_up'])) + scale_y_discrete(labels = rev(labels), expand = c(0, 1), limits=rev) + ggtitle('Southern species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 18) + theme(axis.ticks = element_blank())
# g3 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "Passeriformes"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance))+ geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash') + geom_vline(xintercept = 0) + geom_point(size = 2) + geom_text(hjust=0.5, vjust=0.35,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('Passeriformes') + geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1) + xlim(min(traits_nodiff[,'CI_lo']),max(traits_nodiff[,'CI_up'])) + scale_y_discrete(labels = rev(labels), expand = c(0, 1), limits=rev)+ ggtitle('Passeriformes')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 18) + theme(axis.ticks = element_blank())
# g4 = ggplot(data = traits_nodiff[which(traits_nodiff$model == "terrestrial"),], aes(x = estimate_mean, y = paste(covariate,shift), colour = shift, label = significance)) + geom_hline(yintercept = seq(2.5,20.5,2), colour = 'grey', linetype = 'longdash') + geom_vline(xintercept = 0) + geom_point(size = 2) + geom_text(hjust=0.5, vjust=0.35,show.legend=FALSE, size = 10) + xlab("Estimate") + ylab("") + ggtitle('All species') + geom_errorbarh(aes(y = paste(covariate,shift), xmin = CI_lo, xmax = CI_up), size = 1, height = .1) + xlim(min(traits_nodiff[,'CI_lo']),max(traits_nodiff[,'CI_up'])) + scale_y_discrete(labels = rev(labels), expand = c(0, 1), limits=rev)+ ggtitle('All species')+ scale_colour_manual(values= safe_colorblind_palette) + theme_bw(base_size = 18) + theme(axis.ticks = element_blank())
ggarrange(g1,Northern.dist,g3, g2,Southern.dist,g4, common.legend = T, labels = c('a','','c','b','','d'), widths = c(1.5,1,1.5), font.label = list(size = 20))
################################################################################
library(raster)
library(ggplot2)
library(tidyverse)
library(rnaturalearth) # function ne_countries
library(sf)
library(sdm)
#sdm::installAll()
#install.packages("rnaturalearthdata")
################################################################################
## Load map
sf_UK  <- ne_states(country = 'United Kingdom', returnclass = "sf")
sf_UK <- subset(sf_UK, !(name %in% c('Orkney','Shetland Islands') | region %in% c('Northern Ireland','')))
# sf_UK  <- ne_countries(scale = "medium", country = 'United Kingdom', returnclass = "sf")
ggplot(data = sf_UK) + geom_sf()
## BTO Distribution data
setwd("E:/TheseSwansea/TraitStudy/Github/Range-shift-BTO-breeding-birds")
BTO_distrib <- read.csv("data/distributions.csv", header=T) # period, sp code, season and grid for GB and Ireland
## BTO Species names data
BTO_sp <- read.csv("data/species_lookup.csv", header=T)
## BTO grid data
BTO_grid <- read.csv("data/grid_square_coordinates_lookup.csv", header=T)
# Subset distribution data to Britain
BTO_distrib <- as_tibble(BTO_distrib) %>% filter(island=="B" & season=="B" & resolution==10)
BTO_distrib$periodN <- paste0("P.", as.numeric(droplevels(as.factor(BTO_distrib$period))))
BTO_distrib$Spec <- paste0("Sp", BTO_distrib$speccode)
BTO_distrib$Pres <- 1
#####################
# Grid and BTO Locations
# Coordinates
Coord10 <- as_tibble(BTO_grid) %>%
dplyr::filter(resolution==10 & order<5) %>%
dplyr::group_by(grid) %>%
dplyr::summarise(long = mean(long), lat = mean(lat))
ngrid <- nrow(Coord10)
# Location data (selecting unique coordinates for centre of each grid cell ?)
Loc10 <- BTO_distrib %>% dplyr::select(grid) %>% distinct(grid)
# Join coordinates to location data
Loc10 <- Loc10 %>%  left_join(Coord10)
# Filter missing coordinates
Loc10 <- Loc10 %>%  filter(!is.na(long) & !is.na(lat))
nloc <- nrow(Loc10)
# 3867 locations occupied by birds
plyr(BTO_distrib, 'speccode', summarise, nb.Orkney = length(lat > 58.7), nb = length(lat))
dplyr(BTO_distrib, 'speccode', summarise, nb.Orkney = length(lat > 58.7), nb = length(lat))
library(plyr)
ddply(BTO_distrib, 'speccode', summarise, nb.Orkney = length(lat > 58.7), nb = length(lat))
# Join coordinates to occurrence data
BTO_distrib <- BTO_distrib %>%  left_join(Loc10, by='grid')
BTO_distrib <- BTO_distrib %>% filter(!is.na(long) & !is.na(lat))
library(plyr)
ddply(BTO_distrib, 'speccode', summarise, nb.Orkney = length(lat > 58.7), nb = length(lat))
ddply(BTO_distrib, 'speccode', summarise, nb.Orkney = length(which(lat > 58.7)), nb = length(lat))
ddply(BTO_distrib, 'speccode', summarise, nb.Orkney = length(which(lat > 58.7)), nb = length(lat), prop = nb.Orkney/nb)
t = ddply(BTO_distrib, 'speccode', summarise, nb.Orkney = length(which(lat > 58.7)), nb = length(lat), prop = nb.Orkney/nb)
View(t)
# remove locations abover a latitude of 58.7 to exlude Orkney and Shetland islands
Loc10 = subset(Loc10, lat < 58.7)
BTO_distrib = subset(BTO_distrib, lat < 58.7)
## 3 different periods
period <- unique(BTO_distrib$period)
period
# Nb of grid cells species have been observed
Ngrid <- BTO_distrib %>%
dplyr::group_by(speccode, periodN) %>%
dplyr::summarise(ngrid = n()) # group size
Ngrid <- pivot_wider(Ngrid, id_cols = speccode, names_from = periodN, values_from =ngrid)
Spec <- as_tibble(BTO_sp)
Spec  <- Spec %>%  left_join(Ngrid, by = c("speccode" = "speccode"))
Spec  <- Spec %>% filter(P.1>=50 & P.3>=50)
library(sf)
par(mfrow = c(6,6))
BTO_sf = st_as_sf(BTO_distrib, coords = c('long','lat'))
for (sp in unique(BTO_distrib$speccode)){
conv <-  st_convex_hull(st_union(subset(BTO_sf, speccode == sp)))
plot(conv, main = sp)
plot(subset(BTO_sf, speccode == sp)[,1], add = T)
st_crs(conv) = crs(sf_UK)
BTO_distrib$area_m2[which(BTO_distrib$speccode == sp)] = st_area(conv)
}
# Compute distributional core of species (north or south of the mean position of the all 100 km2 grid cells)
Distr.Core <- BTO_distrib %>% filter(periodN=="P.3") %>% group_by(speccode) %>% summarise(lat_mean.P.1 = mean(lat))
Distr.Core$distrib.core = ifelse(Distr.Core$lat_mean.P.1 > mean(Loc10$lat), "north", "south")
# north south
# 91 > 93   132 > 129
# slightly more northern species compared to without the Orkney and Shetlands
# because the average latitude changes
Spec <- left_join(Spec, Distr.Core)
# Compute distributional core of species (north or south of the mean position of the all 100 km2 grid cells)
Distr.Core <- BTO_distrib %>% filter(periodN=="P.1") %>% group_by(speccode) %>% summarise(lat_mean.P.1 = mean(lat))
Distr.Core$distrib.core = ifelse(Distr.Core$lat_mean.P.1 > mean(Loc10$lat), "north", "south")
Spec <- left_join(Spec, Distr.Core)
## 3 different periods
period <- unique(BTO_distrib$period)
period
# Nb of grid cells species have been observed
Ngrid <- BTO_distrib %>%
dplyr::group_by(speccode, periodN) %>%
dplyr::summarise(ngrid = n()) # group size
Ngrid <- pivot_wider(Ngrid, id_cols = speccode, names_from = periodN, values_from =ngrid)
Spec <- as_tibble(BTO_sp)
Spec  <- Spec %>%  left_join(Ngrid, by = c("speccode" = "speccode"))
Spec  <- Spec %>% filter(P.1>=50 & P.3>=50)
# Compute distributional core of species (north or south of the mean position of the all 100 km2 grid cells)
Distr.Core <- BTO_distrib %>% filter(periodN=="P.1") %>% group_by(speccode) %>% summarise(lat_mean.P.1 = mean(lat))
Distr.Core$distrib.core = ifelse(Distr.Core$lat_mean.P.1 > mean(Loc10$lat), "north", "south")
# north south
# 91 > 93   132 > 129
# slightly more northern species compared to without the Orkney and Shetlands
# because the average latitude changes
Spec <- left_join(Spec, Distr.Core)
# Compute distributional core of species (north or south of the mean position of the all 100 km2 grid cells)
Distr.Core <- BTO_distrib %>% filter(periodN=="P.1") %>% group_by(speccode) %>% summarise(lat_mean.P.1 = mean(lat))
# Compute distributional core of species (north or south of the mean position of the all 100 km2 grid cells)
Distr.Core <- BTO_distrib %>% dplyr::filter(periodN=="P.1") %>% group_by(speccode) %>% dplyr::summarise(lat_mean.P.1 = mean(lat))
Distr.Core$distrib.core = ifelse(Distr.Core$lat_mean.P.1 > mean(Loc10$lat), "north", "south")
Spec <- left_join(Spec, Distr.Core)
# EltonTraits v1.0 (Wilman et al. (2014), https://figshare.com/articles/Data_Paper_Data_Paper/3559887)
temp <- tempfile()
download.file("https://ndownloader.figshare.com/files/5631081", temp)
ET <- read.table(temp, header = TRUE, fill  = TRUE, quote = "\"", stringsAsFactors = FALSE,sep = "\t")
unlink(temp)
ET = rename(ET, scientific_name_ET = Scientific)
t = subset(t, speccode %in% Spec$speccode)
View(t)
sf_UK  <- ne_states(country = 'United Kingdom', returnclass = "sf")
sf_UK <- subset(sf_UK, !(name %in% c('Orkney','Shetland Islands') | region %in% c('Northern Ireland','')))
# sf_UK  <- ne_countries(scale = "medium", country = 'United Kingdom', returnclass = "sf")
ggplot(data = sf_UK) + geom_sf()
## BTO Distribution data
setwd("E:/TheseSwansea/TraitStudy/Github/Range-shift-BTO-breeding-birds")
BTO_distrib <- read.csv("data/distributions.csv", header=T) # period, sp code, season and grid for GB and Ireland
## BTO Species names data
BTO_sp <- read.csv("data/species_lookup.csv", header=T)
## BTO grid data
BTO_grid <- read.csv("data/grid_square_coordinates_lookup.csv", header=T)
# Subset distribution data to Britain
BTO_distrib <- as_tibble(BTO_distrib) %>% filter(island=="B" & season=="B" & resolution==10)
BTO_distrib$periodN <- paste0("P.", as.numeric(droplevels(as.factor(BTO_distrib$period))))
BTO_distrib$Spec <- paste0("Sp", BTO_distrib$speccode)
BTO_distrib$Pres <- 1
#####################
# Grid and BTO Locations
# Coordinates
Coord10 <- as_tibble(BTO_grid) %>%
dplyr::filter(resolution==10 & order<5) %>%
dplyr::group_by(grid) %>%
dplyr::summarise(long = mean(long), lat = mean(lat))
ngrid <- nrow(Coord10)
# Location data (selecting unique coordinates for centre of each grid cell ?)
Loc10 <- BTO_distrib %>% dplyr::select(grid) %>% distinct(grid)
# Join coordinates to location data
Loc10 <- Loc10 %>%  left_join(Coord10)
# Filter missing coordinates
Loc10 <- Loc10 %>%  filter(!is.na(long) & !is.na(lat))
nloc <- nrow(Loc10)
# 3867 locations occupied by birds
# Join coordinates to occurrence data
BTO_distrib <- BTO_distrib %>%  left_join(Loc10, by='grid')
BTO_distrib <- BTO_distrib %>% filter(!is.na(long) & !is.na(lat))
library(plyr)
t = ddply(BTO_distrib, c('speccode','periodN'), summarise, nb.Orkney = length(which(lat > 58.7)), nb = length(lat), prop = nb.Orkney/nb)
t = subset(t, speccode %in% Spec$speccode)
View(t)
################################################################################
library(raster)
library(ggplot2)
library(tidyverse)
library(rnaturalearth) # function ne_countries
library(sf)
library(sdm)
#sdm::installAll()
#install.packages("rnaturalearthdata")
################################################################################
## Load map
sf_UK  <- ne_states(country = 'United Kingdom', returnclass = "sf")
sf_UK <- subset(sf_UK, !(name %in% c('Orkney','Shetland Islands') | region %in% c('Northern Ireland','')))
# sf_UK  <- ne_countries(scale = "medium", country = 'United Kingdom', returnclass = "sf")
ggplot(data = sf_UK) + geom_sf()
## BTO Distribution data
setwd("E:/TheseSwansea/TraitStudy/Github/Range-shift-BTO-breeding-birds")
BTO_distrib <- read.csv("data/distributions.csv", header=T) # period, sp code, season and grid for GB and Ireland
## BTO Species names data
BTO_sp <- read.csv("data/species_lookup.csv", header=T)
## BTO grid data
BTO_grid <- read.csv("data/grid_square_coordinates_lookup.csv", header=T)
# Subset distribution data to Britain
BTO_distrib <- as_tibble(BTO_distrib) %>% filter(island=="B" & season=="B" & resolution==10)
BTO_distrib$periodN <- paste0("P.", as.numeric(droplevels(as.factor(BTO_distrib$period))))
BTO_distrib$Spec <- paste0("Sp", BTO_distrib$speccode)
BTO_distrib$Pres <- 1
#####################
# Grid and BTO Locations
# Coordinates
Coord10 <- as_tibble(BTO_grid) %>%
dplyr::filter(resolution==10 & order<5) %>%
dplyr::group_by(grid) %>%
dplyr::summarise(long = mean(long), lat = mean(lat))
ngrid <- nrow(Coord10)
# Location data (selecting unique coordinates for centre of each grid cell ?)
Loc10 <- BTO_distrib %>% dplyr::select(grid) %>% distinct(grid)
# Join coordinates to location data
Loc10 <- Loc10 %>%  left_join(Coord10)
# Filter missing coordinates
Loc10 <- Loc10 %>%  filter(!is.na(long) & !is.na(lat))
nloc <- nrow(Loc10)
# 3867 locations occupied by birds
# Join coordinates to occurrence data
BTO_distrib <- BTO_distrib %>%  left_join(Loc10, by='grid')
BTO_distrib <- BTO_distrib %>% filter(!is.na(long) & !is.na(lat))
library(plyr)
t = ddply(BTO_distrib, c('speccode','periodN'), summarise, nb.Orkney = length(which(lat > 58.7)), nb = length(lat), prop = nb.Orkney/nb)
# remove locations abover a latitude of 58.7 to exlude Orkney and Shetland islands
Loc10 = subset(Loc10, lat < 58.7)
BTO_distrib = subset(BTO_distrib, lat < 58.7)
ggplot(data = sf_UK) + geom_sf() +
geom_point(data = Loc10, aes(x = long, y = lat), size = 1, shape = 23, fill = "darkred")
ggplot(data = sf_UK) + geom_sf() +
geom_point(data = Coord10, aes(x = long, y = lat), size = 1, shape = 23, fill = "darkred")
ggplot(data = sf_UK) + geom_sf() +
geom_point(data = Loc10, aes(x = long, y = lat), size = 1, shape = 23, fill = "darkred")
BTO_distrib_sf = st_as_sf(BTO_distrib, coords = c('lat', 'long'), crs = crs(sf_UK))
BTO_distrib_location = st_intersection(BTO_distrib_sf, sf_UK)
